var tipuesearch = {"pages": [{'title': 'About', 'text': '\n .. \n', 'tags': '', 'url': 'About.html'}, {'title': 'About me 40823124.', 'text': '\n', 'tags': '', 'url': 'About me 40823124..html'}, {'title': 'Team project', 'text': '', 'tags': '', 'url': 'Team project.html'}, {'title': 'Team1 W2', 'text': '設計出可上下移動之梯子 \n \n', 'tags': '', 'url': 'Team1 W2.html'}, {'title': 'Team1 W3', 'text': "發覺梯子之方案過於複雜短時間內不可行，改成坦克車 \n \n 控制砲台轉動與車輪程式碼 \n \n  車輪 \n threadFunction=function()\n    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do\n        -- Read the keyboard messages (make sure the focus is on the main window, scene view):\n        message,auxiliaryData=sim.getSimulatorMessage()\n        while message~=-1 do\n            if (message==sim.message_keypress) then\n                if (auxiliaryData[1]==2007) then\n                    -- up key\n                    velocity=1\n                    torque=2\n                    hammer_back = 0\n\n                    \n                end\n                if (auxiliaryData[1]==2008) then\n                    -- down key\n                     hammer_back = 1\n                     torque=-2\n                     velocity = -1\n\n                end\n               \n            end\n            message,auxiliaryData=sim.getSimulatorMessage()\n        end\n \n        -- We take care of setting the desired top position:\n        sim.setJointTargetPosition(joint, velocity)\n        sim.setJointForce(joint,torque)\n        \n        -- Since this script is threaded, don't waste time here:\n        sim.switchThread() -- Resume the script at next simulation loop start\n    end\nend\n-- Put some initialization code here:\n-- Retrieving of some handles and setting of some initial values:\njoint=sim.getObjectHandle('joint1'),sim.getObjectHandle('joint3')\nhammer=sim.getObjectHandle('weel1'),sim.getObjectHandle('weel3')\nvelocity=0\nhammer_back=0\ntorque=0\norientation=sim.getJointPosition(joint, -1)\nposition=sim.getObjectPosition(hammer,-1)\n-- Here we execute the regular thread code:\nres,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)\nif not res then\n    sim.addStatusbarMessage('Lua runtime error: '..err)\nend\n \n-- Put some clean-up code here:\n\n \n 砲台 \n threadFunction=function()\n    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do\n        -- Read the keyboard messages (make sure the focus is on the main window, scene view):\n        message,auxiliaryData=sim.getSimulatorMessage()\n        while message~=-1 do\n            if (message==sim.message_keypress) then\n                if (auxiliaryData[1]==97) then\n                    -- a key\n                    velocity=0.01\n                    torque=0.02\n                    hammer_back = 0\n\n                    \n                end\n                if (auxiliaryData[1]==100) then\n                    -- d key\n                     hammer_back = 1\n                     torque=-0.02\n                     velocity = -0.01\n\n                end\n               \n            end\n            message,auxiliaryData=sim.getSimulatorMessage()\n        end\n \n        -- We take care of setting the desired top position:\n        sim.setJointTargetPosition(joint, velocity)\n        sim.setJointForce(joint,torque)\n        \n        -- Since this script is threaded, don't waste time here:\n        sim.switchThread() -- Resume the script at next simulation loop start\n    end\nend\n-- Put some initialization code here:\n-- Retrieving of some handles and setting of some initial values:\njoint=sim.getObjectHandle('joint0')\nhammer=sim.getObjectHandle('top')\nvelocity=0\nhammer_back=0\ntorque=0\norientation=sim.getJointPosition(joint, -1)\nposition=sim.getObjectPosition(hammer,-1)\n-- Here we execute the regular thread code:\nres,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)\nif not res then\n    sim.addStatusbarMessage('Lua runtime error: '..err)\nend\n \n-- Put some clean-up code here:\n\nthreadFunction=function()\n    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do\n        -- Read the keyboard messages (make sure the focus is on the main window, scene view):\n        message,auxiliaryData=sim.getSimulatorMessage()\n        while message~=-1 do\n            if (message==sim.message_keypress) then\n                if (auxiliaryData[1]==97) then\n                    -- a key\n                    velocity=0.01\n                    torque=0.02\n                    hammer_back = 0\n\n                    \n                end\n                if (auxiliaryData[1]==100) then\n                    -- d key\n                     hammer_back = 1\n                     torque=-0.02\n                     velocity = -0.01\n\n                end\n               \n            end\n            message,auxiliaryData=sim.getSimulatorMessage()\n        end\n \n        -- We take care of setting the desired top position:\n        sim.setJointTargetPosition(joint, velocity)\n        sim.setJointForce(joint,torque)\n        \n        -- Since this script is threaded, don't waste time here:\n        sim.switchThread() -- Resume the script at next simulation loop start\n    end\nend\n-- Put some initialization code here:\n-- Retrieving of some handles and setting of some initial values:\njoint=sim.getObjectHandle('joint0')\nhammer=sim.getObjectHandle('top')\nvelocity=0\nhammer_back=0\ntorque=0\norientation=sim.getJointPosition(joint, -1)\nposition=sim.getObjectPosition(hammer,-1)\n-- Here we execute the regular thread code:\nres,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)\nif not res then\n    sim.addStatusbarMessage('Lua runtime error: '..err)\nend\n \n-- Put some clean-up code here:\n\n", 'tags': '', 'url': 'Team1 W3.html'}]};