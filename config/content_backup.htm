<h1>About</h1>
<p><img alt="" height="306" src="/images/EUt8sox.gif" width="500"/></p>
<p>..</p>
<h3>About me 40823124.</h3>
<p><a href="https://github.com/40823124/cd2021"><img height="50" src="https://github.githubassets.com/images/modules/open_graph/github-mark.png" width="100"/></a></p>
<p><a href="https://github.com/40823124/cd2021">Github</a></p>
<p><a href="https://github.com/40823124/cd2021"><img height="100" src="https://play-lh.googleusercontent.com/lMoItBgdPPVDJsNOVtP26EKHePkwBg-PkuY9NOrc-fumRtTFP4XhpUNk_22syN4Datc" width="50"/></a></p>
<p><a href="https://www.youtube.com/channel/UCiADs8ujLZRPFNU6lo-s8cg">Youtube</a></p>
<p></p>
<h1>Team project</h1>
<h2>Team1 W2</h2>
<p>design a ladder that can move up and down</p>
<p><img alt="" height="500" src="/images/w2.gif" width="900"/></p>
<h2>Team1 W3</h2>
<p>Founded that the ladder was too complicated and not feasible in a short time, so changed it to a tank.</p>
<p><img alt="" height="500" src="/images/w3.gif" width="900"/></p>
<p>control the rotation of the turret</p>
<p><img alt="" height="550" src="/images/w3_2.gif" width="950"/></p>
<p><br/> wheel</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==2007) then
                    -- up key
                    velocity=1
                    torque=2
                    hammer_back = 0

                    
                end
                if (auxiliaryData[1]==2008) then
                    -- down key
                     hammer_back = 1
                     torque=-2
                     velocity = -1

                end
               
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
 
        -- We take care of setting the desired top position:
        sim.setJointTargetPosition(joint, velocity)
        sim.setJointForce(joint,torque)
        
        -- Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end
end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:
joint=sim.getObjectHandle('joint1'),sim.getObjectHandle('joint3')
hammer=sim.getObjectHandle('weel1'),sim.getObjectHandle('weel3')
velocity=0
hammer_back=0
torque=0
orientation=sim.getJointPosition(joint, -1)
position=sim.getObjectPosition(hammer,-1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end
 
-- Put some clean-up code here:

</pre>
<p>turret</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==97) then
                    -- a key
                    velocity=0.01
                    torque=0.02
                    hammer_back = 0

                    
                end
                if (auxiliaryData[1]==100) then
                    -- d key
                     hammer_back = 1
                     torque=-0.02
                     velocity = -0.01

                end
               
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
 
        -- We take care of setting the desired top position:
        sim.setJointTargetPosition(joint, velocity)
        sim.setJointForce(joint,torque)
        
        -- Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end
end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:
joint=sim.getObjectHandle('joint0')
hammer=sim.getObjectHandle('top')
velocity=0
hammer_back=0
torque=0
orientation=sim.getJointPosition(joint, -1)
position=sim.getObjectPosition(hammer,-1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end
 
-- Put some clean-up code here:

threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==97) then
                    -- a key
                    velocity=0.01
                    torque=0.02
                    hammer_back = 0

                    
                end
                if (auxiliaryData[1]==100) then
                    -- d key
                     hammer_back = 1
                     torque=-0.02
                     velocity = -0.01

                end
               
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
 
        -- We take care of setting the desired top position:
        sim.setJointTargetPosition(joint, velocity)
        sim.setJointForce(joint,torque)
        
        -- Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end
end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:
joint=sim.getObjectHandle('joint0')
hammer=sim.getObjectHandle('top')
velocity=0
hammer_back=0
torque=0
orientation=sim.getJointPosition(joint, -1)
position=sim.getObjectPosition(hammer,-1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end
 
-- Put some clean-up code here:

</pre>
<h2>Team 2</h2>
<p>Programming control mechanicalarm</p>
<p>Used lua api to contral mechanical arm in CoppeliaSim</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/XAc5le46Wso" width="560"></iframe></p>
<p></p>
<p>I edited all joints separately</p>
<p><img alt="" height="398" src="/images/programming.png" width="655"/></p>
<p></p>
<p>This is the parameter of the joint</p>
<p><img alt="" height="398" src="/images/parameter.png" width="650"/></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==97) then
                    -- d key
                    if(o &lt; i*10) then
                    o = o+i
                    velocity=velocity+0.11
                    torque=torque+0.1
                    hammer_back = 0
                    end
                end
                if (auxiliaryData[1]==100) then
                    -- a key 
                    if(o &gt; -i*10) then
                    o = o-i
                    velocity=velocity-0.11
                    torque=torque-0.1
                    hammer_back = 1
                    end
                end
                
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
 
        -- We take care of setting the desired hammer position:
        if hammer_back == 1
            then 
               sim.setJointPosition(joint, -1, orientation)
               --sim.setObjectPosition(hammer,-1, position)
        end
        sim.setJointTargetPosition(joint, velocity)
        --sim.setJointForce(joint,torque)

        -- Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end
end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:
i = 1
o = i*1
joint=sim.getObjectHandle('redundantRob_joint1')
hammer=sim.getObjectHandle('Rectangle')
velocity=0
hammer_back=0
torque=0
sliding = 0
orientation=sim.getJointPosition(joint, -1)
position=sim.getObjectPosition(hammer,-1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end
 
-- Put some clean-up code here:
</pre>
<h2>Difficulties and debugging</h2>
<p>在控制關節時因為每個關節所設置的位置與阻尼參數不同，會有抖動的情形發生，基本上把所有的參數都設成一樣的並把馬達改成控制模式就好了。</p>
<p></p>
<p>再來是程式的部分，因為每個關節都是用速度去控制轉動的，所以為了避免互相影響把每個關節分開單獨用一個子模組控制，而其中設置了轉動條件，限制轉動的次數，且設置了兩個參數控制互鎖，並用自身相加方式達成可以重複接收訊號。</p>
<p></p>
<p>另外在關節2的部分因為承受整隻手臂的絕大重量，所以轉動到了一定角度後會因為自身重量而倒下，所以在關節與程式皆有限制轉動的角度跟輸入次數，當按下按鍵一定次數後必須往反方向轉動，否則互鎖。</p>
<p></p>
<p>參考鍵盤ASCII控制字符</p>
<p><img alt="" height="653" src="/images/ASCII.gif" width="548"/></p>
<h2>Team 3</h2>
<h3>RoboDK</h3>
<p>RoboDK的執行檔在bin目錄下</p>
<p><img alt="" height="728" src="/images/ROBODK.png" width="642"/> </p>
<p>執行API前需安裝pip</p>
<p><img alt="" height="54" src="/images/pipROBODK.png" width="578"/></p>
<p><b>error</b></p>
<p><b>其中一個函示庫無法找到</b></p>
<p><b><img alt="" height="752" src="/images/pipROBODK.png error.png" width="844"/></b></p>
<h3>MTB_robot</h3>
<p>嘗試找出plugin的部分</p>
<p><img alt="" height="972" src="/images/mtb1.png" width="900"/></p>
<h3>W15</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/IKOGwoJ2HLk" width="560"></iframe></p>
<p><br/>We saw this simple two-link robot in the previous lecture about forward kinematics.</p>
<p>我們在上一堂關於正向運動學的課程中看到這個簡單的雙連桿機構。</p>
<p>The tooltip pose of this robot is described simply by two numbers, the coordinates x and y with respect to the world coordinate frame.</p>
<p>該機構的提示框由兩個數字簡單描述，相對於絕對坐標系的坐標 x 和 y。</p>
<p>So, the problem here is that given x and y, we want to determine the joined angles, q1 and q2.</p>
<p>所以，這裡的問題是有了x和y條件，我們要求解連接角q1和q2的值為多少。</p>
<p>The solution that we’re going to follow in this particular section is a geometric one.</p>
<p>我們利用特定幾何來解決這個問題。</p>
<p>We’re going to start with a simple piece of construction.</p>
<p>我們從一個簡單的結構開始。</p>
<p>We’re going to overlay the red triangle on top of our robot.</p>
<p>我們將在機構上覆蓋紅色三角形。</p>
<p>We know that the end point coordinate is x, y, so the vertical height of the triangle is y, the horizontal width is x.</p>
<p>我們知道最終坐標是x，y，所以三角形的垂直高度為y，水平寬度為x。</p>
<p>And, using Pythagoras theorem, we can write r squared equals x squared plus y squared.</p>
<p>然後，利用Pythagorean theorem(畢氏定理)，我們可寫出 r² = x ²+ y²。</p>
<p>So far, so easy.</p>
<p>到目前為止都很容易。</p>
<p>Now, w’re going to look at this triangle highlighted here in red and we want to determine the angle alpha.</p>
<p>現在，我們查看此處凸顯的紅色三角形，並且要確定α角。</p>
<p>(α=alpha)</p>
<p>In order to do that, we need to use the cosine rule.</p>
<p>為了做到這一點，我們須使用餘弦定理。<br/>(餘弦=cosine)</p>
<p>And, if you’re a little rusty on the cosine rule, here is a bit of a refresher.</p>
<p>如果你對餘弦定理有點生疏，這裡可以幫助你複習一下。</p>
<p>We have an arbitrary triangle.</p>
<p>有一個任意三角形。</p>
<p>We don’t have any right angles in it and we’re going to label the length of this edge as A and the angle opposite that edge, we’re going to label as little a.</p>
<p>三角形中沒有任何的直角，將這邊的角度標為小a，而對邊的長度標為A。</p>
<p>And, we do the same for this edge and this angle, and this edge and this angle.</p>
<p>我們再對這邊和這個角，以及這邊和這個叫做同樣的事。</p>
<p>So, all together, the sides are labelled capitals A, B and C, and the angles are labelled little a, little b, and little c.</p>
<p>以此類推，所有邊都標記為A, B, C，角都標記為a, b, c 。</p>
<p>So, the cosine rule is simply this relationship here.</p>
<p>餘弦定理就是這種關係。</p>
<p>It’s a bit like Pythagoras’ theorem except for this extra term on the end with the cos a in it.</p>
<p>它有點像畢達哥拉斯定理，不同之處是末端多出了cos a。</p>
<p>Now, let’s apply the cosine rule to the particular triangle we looked at a moment ago.</p>
<p>將餘弦定理套用於剛剛看到的特定三角形。</p>
<p>It’s pretty straightforward to write down this particular relationship.</p>
<p>寫下此特殊關係很簡單。</p>
<p>We can isolate the term cos alpha which gives us the angle alpha that we’re interested in.</p>
<p>我們可分離出 cosα ，只需要得知α角度作為條件。</p>
<p>And, it’s defined in terms of the constant link lengths, A1 and A2 and the position of the end effector, x and y.</p>
<p>它是根據恆定連桿長度A1和A2以及最終執行器的位置x和y定義。</p>
<p>We can write this simple relationship between the angles alpha and q2.</p>
<p>我們可寫出角度α和q2之間的簡單關係。</p>
<p>And, we know from the shape of the cosine function that cos of q2 must be equal to negative of cos alpha.</p>
<p>並且我們從餘弦函數中得知cos q2必須等於 –cos α。</p>
<p>This time, let’s just write an expression for the cosine of the joined angle q2.</p>
<p>這次寫出餘弦在連接角q2的表達式。</p>
<p>Now, we’re going to draw yet another red triangle and we’re going apply some simple trigonometry here.</p>
<p>我們繪製另一個紅色三角形，並應用三角函數。</p>
<p>If we know q2, then we know this length and this length of the red triangle.</p>
<p>如果我們知道q2，就可知道這個長度和這個三角形的長度。</p>
<p>We can write this relationship for the sine of the joined angle q2.</p>
<p>我們可以在連接角q2寫出正弦關係。</p>
<p>Now, we can consider this bigger triangle whose angle is beta and this side length of this triangle is given here in blue.</p>
<p>現在我們考慮這個大一點的三角形，它角度是β，此三角形的邊長由藍色表示。</p>
<p>(β=beta)</p>
<p>And, the length of the other side of the triangle is this.</p>
<p>且三角形另一邊長度是這個。</p>
<p>So, now we can write an expression for the angle beta in terms of these parameters here.</p>
<p>我們可在此根據參數寫出角度β的表達式。</p>
<p>Going back to the red triangle that we drew earlier, we can establish a relationship between q1 and the angle beta.</p>
<p>回到之前畫的紅色三角形，我們可建立出q1和β的關係。</p>
<p>Introduce yet another angle, this one gamma and we can write a relationship between the angle gamma and the tooltip coordinates x and y.</p>
<p>引入另一個角度ɣ，可寫出角度ɣ和提示框座標x和y之間的關係。</p>
<p>(ɣ=gamma)</p>
<p>Now, we can write a simple relationship between the angles that we’ve constructed, gamma and beta and the joined angle we’re interested in which is q1.</p>
<p>現在我們可建構出角度β和ɣ與連接角度q1之間的關係。</p>
<p>And, the total relationship looks something like this.</p>
<p>而且，整個關係看起來像這樣。</p>
<p>Quite a complex relationship, it gives us the angle of joined one, that’s q1 in terms of the end effector coordinates y and x, and a bunch of constants, a1 and a2, and it’s also a function of the second joint angle, q2.</p>
<p>相當複雜的關係，它提供連接的角度，即最終執行器坐標 y 和 x 的 q1，以及一系列常數 a1 和 a2，它也是第二個關節角度 q2 的函數。</p>
<p>So, let’s summarize what it is that we have derived here.</p>
<p>所以，總結我們在這裡得出了什麼。</p>
<p>We have an expression for the cosine of q2 and we have an expression for q1.</p>
<p>我們有q2餘弦方程式與q1方程式。</p>
<p>Now, the cosine function is symmetrical about 0.</p>
<p>餘弦函數在0對稱。</p>
<p>So, if we know the value of the cosine of q2, then there are two possible solutions a positive angle and a negative angle.</p>
<p>所以我們知道cosq2的值可能為正角和負角。</p>
<p>We’re going to explicitly choose the positive angle. Which means that I can write this expression here.</p>
<p>我們選擇正角，表示我可以寫出此表達式。</p>
<p>And now, we have what we call the inverse kinematic solution for this two-link robot.</p>
<p>現在我們能用逆向運動學來解決雙連桿機構。</p>
<p>(逆向運動學=inverse kinematic,IK)</p>
<p>We have an expression for the two joined angles, q1 and q2 in terms of the end effector pose x and y, and a bunch of constants.</p>
<p>我們有兩個連接角 q1 和 q2 的表達式，根據最終執行器的x 和 y 以及一系列常數。</p>
<p>You notice that the two equations are not independent.</p>
<p>你要注意到兩方程式不是獨立的。</p>
<p>The equation for q1, in fact, depends on the solution for q2.</p>
<p>事實上，q1方程式取決於q2的解。</p>
<p>In this case, q2 is negative and we’re going to write the solution for q2 with a negative sign in front of the inverse cosine.</p>
<p>在這情況下，q2為負，我們將在q2反餘弦的解前面加上負號。</p>
<p>Now, we need to solve for q1, so we’re going to introduce this particular red triangle, the angle beta that we solved previously, and the angle gamma which is defined in terms of y and x.</p>
<p>我們需求解q1，因此采用這個特定的三角形，之前求解的角度β以及根據y和x定義的角度ɣ。</p>
<p>Now, we write a slightly different relationship between q1, gamma and beta, different to what we had before.</p>
<p>q1、ɣ和β之間的關係，和之前求的不同。</p>
<p>There’s a change of sign involved.</p>
<p>涉及到符號的變化。</p>
<p>Then, we can substitute all that previous equation and come up with this expression for q1.</p>
<p>然後我們可代換之前所有等式，並求得此q1方程式。</p>
<p>Again, there is a change of sign here.</p>
<p>同樣，這裡的符號發生了變化。</p>
<p>Previously, this was a negative sign.</p>
<p>先前，這是個負號。</p>
<p>And, here in summary form is the solution for the inverse kinematics of our two-link robot when it is in this particular configuration, where q2 is negative.</p>
<p>這是雙連桿機構在此逆向運動學的總形式，其中q2為負。</p>
<p>Let’s compare the two solutions, the case where q2 is positive and the case where q2 is negative.</p>
<p>讓我們比較兩個解決方案，q2為正和q2為負的情況。</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/eIZuz1XCd0w" width="560"></iframe></p>
<p>Here we have the same two link robot as we just looked at but this time we're going tosolve it using an analytical approach , that is we're going to rely much more on algebra ,particular linear algebra rather than geometry .</p>
<p>在這裡，我們有與前一篇相同的兩連桿機械手臂，但這次我們將使用分析方法來解決它，意味著我們將更多地依賴代數，特別是使用線性代數而不是幾何。</p>
<p>We have an expression E , which is the homogeneous transformation which represents the pose of the robots endefector and we looked at this in the last lecture , we can write the endefector pose as a sequence of elementary homogeneous transformations .</p>
<p>我們有一個表達式 E，它是表示機械手臂最終位置的齊次變換式，我們在上一課中看到了這一點，我們可以將最終位置寫為一系列基本齊次變換式。</p>
<p>A rotation by Q1 , a translation along the X direction by A1 , a rotation by Q2 and then a translation in the X direction by A2 .</p>
<p>Q1 旋轉，A1 沿 X 方向平移，Q2 旋轉，然後 A2 沿 X 方向平移。</p>
<p>If I expand this out , multiply all the transformations together , I get the expression shown here ; a three by three homogeneous transformation matrix representing the pose of the robot's endefector.</p>
<p>如果我將其展開，將所有變換相乘，就會得到此處所示的表達式 E ;它是一個三乘三的齊次變換矩陣，表示機械手臂的最終的位置。</p>
<p>Now for this particular two link robot , we are only interested in the position of its endefector , it's X and Y co - ordinate and they are these two elements within the homogeneous transformation matrix , so I'm going to copy those out .</p>
<p>現在對於這個特殊的兩連桿機器人，我們只對它的最終位置感興趣，與它有關的是 X 和 Y 坐標，它們是齊次變換矩陣中的這兩個元素，所以我將把它們複製出來。</p>
<p>So here again is our expression for X and Y and what we're going to do is a fairly common trick , we're going to square and add these two equations and I get a relationship that looks like this .</p>
<p>所以這裡又是我們對 X 和 Y 的表達式，我們要做的是一個相當常見的技巧，我們要將它平方並將這兩個方程相加，我得到一個看起來像這樣的關係式。</p>
<p>Now I can solve for the joint angle Q2 in terms of the endefector pose X and Y and the robot's constants A1 and A2.</p>
<p>現在我可以根據最終位置X和Y以及機械手臂的常數A1及A2來求出關節角度Q2。</p>
<p>Now what I'm going to do is apply the sum of angles identity .</p>
<p>現在我要做的是應用角度之和的特性。</p>
<p>I'm going to expand these terms, sine of Q1 plus Q2 or cos of Q1 plus Q2 and to make life a little bit easier, I'm going to make some substations, so where ever I had cos Q2, I'm going to write C2 and where ever I had sine Q2, I'm going to write S2.</p>
<p>我將展開這些項，Q1 的正弦加 Q2 或 Q1 的餘弦加 Q2，為了讓生活更輕鬆一點，我將建立一些分部，所以只要有 cos Q2，我會將其取代為C2並且在有正弦Q2的地方，我會將其取代為S2。</p>
<p>It's a fairly common shorthand when people are looking at robot kinematic equations.</p>
<p>當人們解決機械手臂運動學方程式時，這是一個相當常見的快速記法。</p>
<p>And here are the equations after making those substitutions.</p>
<p>這是進行替換後的方程式。</p>
<p>Looking at these two equations, I can see that they fall into a very well known form and for that form there is a very well known solution.</p>
<p>看看這兩個方程式，我可以看到它們屬於一個眾所周知的形式，對於這種形式，有一個淺顯易見的解決方案。</p>
<p>So I'm going to consider just one of the equations, the equation for Y and using our well known identity and it's solution, I can determine the values for the variables little a, little b and little c and once l've determined those, then I can just write down the solution for Q1, which x is the equivalent of theta in this particular case.</p>
<p>所以我將只考慮其中一個方程，Y 的方程，並使用我們眾所周知的恆等式和它的解，我可以確定變量小 a、小 b 和小 c 的值，一旦我確定了這些，然後我可以寫下 Q1 的解決方程，在這種特殊情況下，x 相當於 theta。</p>
<p>Here again is our expression for Q1, copied over from the previous slide and we may remember from earlier in our workings that we determined this particular relationship; X squared plus Y squared is equal to this particular complex expression.</p>
<p>這裡再次是我們對 Q1 的表達，從上一張幻燈片複製過來，我們可能還記得在我們早期的說明中，確定了這種特殊關係； X 平方加 Y 平方等於這個特定的複雜表達式。</p>
<p>So I can substitute that in and do some simplification and I end up with this slightly less complex expression for Q1.</p>
<p>因此，我可以將其替換並進行一些簡化，最終得到 Q1 的這個稍微不那麼複雜的表達式。</p>
<p>And it is the same expression that I got following the geometric approach in the previous section.</p>
<p>這與我在上一節中遵循幾何方法求出的表達式一模一樣。</p>
<p>公式</p>
<p><img alt="" height="314" src="/images/mtbrobot.png" width="560"/></p><h3>w16_1</h3>
<h4>Onshape繪製手臂</h4>
<p><img alt="" height="378" src="/images/w16_1.png" width="1020"/></p>
<p><a href="https://cad.onshape.com/documents/afa2b64a9d6cff14c62bced8/w/5f455d7b62238b8359139a3a/e/9083ff112ce27fcd606686ec">Onshape檔案</a></p><h3>w16_2</h3>
<h4>建立 CoppeliaSim 4.1.0 MTB robot 場景</h4>
<p>請以自行繪製之零件輸入 CoppeliaSim 後, 組合為 MTB robot 模型, 並利用 Leo Editor 以 require 導入 Lua 程式運作, 分別控制各軸轉動示範.</p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/lCD11Zie9HI" width="560"></iframe></p>
<p></p>
<pre class="brush:python;auto-links:false;toolbar:false" contenteditable="false">function moving1()

    sim.setJointTargetPosition(joint1,45*math.pi/180)
    sim.setJointTargetPosition(joint2,-45*math.pi/180)

    
end
function moving2()

    sim.setJointTargetPosition(joint1,-45*math.pi/180)
    sim.setJointTargetPosition(joint2,45*math.pi/180)

    
end


function sysCall_threadmain()
    
    t=5
    joint1=sim.getObjectHandle('joint1')
    joint2=sim.getObjectHandle('joint2')
    sim.setJointTargetPosition(joint1,0)
    sim.setJointTargetPosition(joint2,0)

    sim.wait(t)
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostopre do
        moving1()
        sim.wait(t)
        moving2()
        sim.wait(t)
        sim.setJointTargetPosition(joint1,0)
        sim.setJointTargetPosition(joint2,0)
        sim.wait(t)
    end

end
</pre>
<p>影片內檔案放在github</p><h3>w16_3_1</h3>
<h4>逆向運動學函式</h4>
<p>1.鍵盤控制:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/zjN3X-FQxyw" title="YouTube video player" width="560"></iframe></p>
<p>鍵盤控制的ASCII對應表在之前的文章中有，每次轉動5度，吸盤上下則只有下跟原點兩種</p>
<pre class="brush:python;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init() 
    b1=sim.getObjectHandle('joint1')
    m1=sim.getObjectHandle('joint2')
    s1=sim.getObjectHandle('joint4')
    suctionPad=sim.getObjectHandle('suctionPad')
    BaseFrame=sim.getObjectHandle("BaseFrame")
    block =sim.getObjectHandle("BOX")
    r1 = 0
    r2 = 0
    d3 = 0
    deg = math.pi/180
end
function sysCall_actuation() 

    message, auxiliaryData=sim.getSimulatorMessage()
        while message ~= -1 do
            key=auxiliaryData[1]
            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==101) then 
                    --press e to open the suctionpad
sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),'active','true')
                end 
                
                if (auxiliaryData[1]==113) then 
                    --press q to close the suctionpad
sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),'active','false')
                end 
                
                if (auxiliaryData[1]==068) then 
                    --press D to turn joint1
                     r1 = r1 + 5*deg
                     sim.setJointPosition(b1, r1)
                end 
                if (auxiliaryData[1]==065) then 
                    --press A to turn joint1
                     r1 = r1  - 5*deg
                     sim.setJointPosition(b1, r1)
                end 
                if (auxiliaryData[1]==100) then 
                    --press d to turn joint2
                     r2 = r2 + 5*deg
                     sim.setJointPosition(m1, r2)
                end 
                if (auxiliaryData[1]==097) then 
                    -- press a to turn joint2
                     r2 = r2 - 5*deg
                     sim.setJointPosition(m1, r2)
                end 
                if (auxiliaryData[1]==119) then 
                    --press s to control joint4
                     d3 =-0.058
                     sim.setJointPosition(s1, d3)
                end 
                if (auxiliaryData[1]==115) then 
                    --press w to control joint4
                     sim.setJointPosition(s1, 0)
                end 
                
           end  
    message, auxiliaryData=sim.getSimulatorMessage()
        end 
end 


</pre>
<p></p><h3>w16_3</h3>
<p>2.迴圈自動</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/NeT7Q6wGPtY" title="YouTube video player" width="560"></iframe></p>
<p></p>
<pre class="brush:python;auto-links:false;toolbar:false" contenteditable="false">function moving(x,y)
  
    a1=0.4861386976
    a2=0.3819028766
--角度&gt;0
    if x&gt;0 and y&gt;0 then
 		r=x^2+y^2
  		q2=math.deg(math.acos((r-a1^2-a2^2)/(2*a1*a2)))
  		s2=math.sin(math.rad(q2))
  		c2=math.cos(math.rad(q2))
 		q1=math.deg(math.atan(y/x)-math.atan((a2*s2)/(a1+a2*c2)))
 	end
--角度&lt;0 if="" x="" 0="" and="" y="" 0="" then="" q2="-math.deg(math.acos((x^2+y^2-a1^2-a2^2)/(2*a1*a2)))" q1="math.deg(math.atan2(y," x="" math="" atan2="" a2="" math="" sin="" q2="" a1="" a2="" math="" cos="" q2="" end="" print="" q1="" print="" q2="" sim="" setjointtargetposition="" joint1="" q1="" math="" pi="" 180="" sim="" setjointtargetposition="" joint2="" q2="" math="" pi="" 180="" end="" function="" pick_and_place="" x="" y="" sim="" setintegersignal="" pad_switch="" 0="" moving="" x="" y="" sim="" wait="" t="" sim="" setintegersignal="" pad_switch="" 1="" sim="" setjointtargetposition="" joint4="" -0="" 060="" sim="" wait="" t="" sim="" setjointtargetposition="" joint4="" 0="" sim="" wait="" t="" end="" function="" syscall_threadmain="" t="5" joint1="sim.getObjectHandle('joint1')" joint2="sim.getObjectHandle('joint2')" joint4="sim.getObjectHandle('joint4')" sim="" setintegersignal="" pad_switch="" 1="" while="" sim="" getsimulationstate="" sim="" simulation_advancing_abouttostopre="" do="" x="0.2" y="0.7" moving="" x="" y="" sim="" wait="" t="" pick_and_place="" x="" y="" sim="" wait="" t="" x="-0.3" y="-0.55" moving="" x="" y="" sim="" wait="" t="" pick_and_place="" x="" y="" sim="" wait="" t="" end="" end="" pre=""&gt;</pre>
<p>程式部分採用錢個禮拜中逆向運動學與聯桿的算式，求出兩根連桿旋轉的角度，但(-0.3,-0.55)這個角度的計算還需要再做更正</p>
<pre class="brush:python;auto-links:false;toolbar:false" contenteditable="false"><!--0--></pre><h1>coppeliasim</h1>
<h2>RemoteApi</h2>
<p>I try to make a remoteapi(python) of coppeliasim to control the example of robot<br/>But it just start simulation, and I cannot control the movement of the model as I set it up.</p>
<p><img alt="" height="619" src="/images/w5_1.gif" width="1219"/></p>
<p>To use the remote API functionality in python script, need following 3 items:<br/>sim.py simConst.py remoteApi.dill ,it can ce found in coppeliasim-&gt;programming-&gt;remoteapibindings-&gt;python , just put all of then in to a same folder.</p>
<p></p>
<p>code</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from __future__ import division
import numpy as np
import math
import sim

RAD2EDG = 180 / math.pi   # 常數，弧度轉度數
tstep = 0.005             # 定義模擬步長
# 配置關節資訊
jointNum = 6
baseName = 'Jaco'
jointName = 'Jaco_joint'
print('Program started')
# 關閉潛在的連線
sim.simxFinish(-1)
# 每隔0.2s檢測一次，直到連線上V-rep
while True:
    clientID = sim.simxStart('127.0.0.1', 19999, True, True, 5000, 5)
    if clientID &gt; -1:
        print ('Connected to remote API server')
        break
    else:
        time.sleep(0.2)
        print("Failed connecting to remote API server!")
print("Connection success!")
# 設定模擬步長，為了保持API端與V-rep端相同步長
sim.simxSetFloatingParameter(clientID, sim.sim_floatparam_simulation_time_step, tstep, sim.simx_opmode_oneshot)
# 然後開啟同步模式
sim.simxSynchronous(clientID, True) 
sim.simxStartSimulation(clientID, sim.simx_opmode_oneshot)

# 然後讀取Base和Joint的控制代碼
jointHandle = np.zeros((jointNum,), dtype=np.int) # 注意是整型
for i in range(jointNum):
    _, returnHandle = sim.simxGetObjectHandle(clientID, jointName + str(i+1), sim.simx_opmode_blocking)
    jointHandle[i] = returnHandle

_, baseHandle = sim.simxGetObjectHandle(clientID, baseName, sim.simx_opmode_blocking)

print('Handles available!')

# 然後首次讀取關節的初始值，以streaming的形式
jointConfig = np.zeros((jointNum,))
for i in range(jointNum):
     _, jpos = sim.simxGetJointPosition(clientID, jointHandle[i], sim.simx_opmode_streaming)
     jointConfig[i] = jpos
     lastCmdTime=sim.simxGetLastCmdTime(clientID)  # 記錄當前時間
sim.simxSynchronousTrigger(clientID)  # 讓模擬走一步
# 開始模擬
while sim.simxGetConnectionId(clientID) != -1:
    currCmdTime=sim.simxGetLastCmdTime(clientID)  # 記錄當前時間
    dt = currCmdTime - lastCmdTime # 記錄時間間隔，用於控制
    # ***
    # ***
    # ***
    lastCmdTime=currCmdTime    # 記錄當前時間
    sim.simxSynchronousTrigger(clientID)  # 進行下一步
    sim.simxGetPingTime(clientID)    # 使得該模擬步走完
            # 讀取當前的狀態值，之後都用buffer形式讀取
    for i in range(jointNum):
            _, jpos = sim.simxGetJointPosition(clientID, jointHandle[i], sim.simx_opmode_buffer)
            print(round(jpos * RAD2DEG, 2))
            jointConfig[i] = jpos

    # 控制命令需要同時方式，故暫停通訊，用於儲存所有控制命令一起傳送
    sim.simxPauseCommunication(clientID, True)
    for i in range(jointNum):
            sim.simxSetJointTargetPosition(clientID, jointHandle[i], 120/RAD2DEG, sim.simx_opmode_oneshot)
            sim.simxPauseCommunication(clientID, False)
            </pre>
<h1>python</h1>
<p>各組隨機抽取2個學號並排序</p>
<pre class="brush:python;auto-links:false;toolbar:false" contenteditable="false">import random

with open("stage3_ag1.txt") as fh:
    data=fh.readlines()

for i in range(len(data)):
    group=data[i].rstrip("\n").split("\t")
    
    subgroup=group[1:]
    memberNum=0
    count =0
    for j in range(len(subgroup)):
        if(subgroup[j]!=""):
            count+=1
            if(count%2==0):
                memberNum+=1
    print("group"+" "+str(i+1)+":"+str(memberNum))
    beRandomGroup=[]
    k=0
    while(k&lt;len(subgroup)):
        if(subgroup[k]!=""):
            beRandomGroup.append(subgroup[k])
        k=k+2
    var=random.choice(beRandomGroup)
    while(1==1):
        var2=random.choice(beRandomGroup)
        if(var2!=var):
            break
    print(var)
    print(var2)
    print("---------------------")
</pre>
<p>out put</p>
<pre>group 1:8
40823123
40823136
---------------------
group 2:8
40823102
40871106
---------------------
group 3:6
40523252
40823154
---------------------
group 4:8
40823121
40823127
---------------------
group 5:8
40823115
40823128
---------------------
group 6:8
40823110
40823153
---------------------</pre>